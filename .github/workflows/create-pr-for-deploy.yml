name: Create PR for Deploy

on:
  workflow_dispatch:

jobs:
  create-pr:
    name: Create PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short commit sha
        id: commit-sha
        run: |
          sha=${{ github.event.client_payload.sha }}
          echo ${sha}
          sha_short=${sha:0:7}
          echo "Short commit sha: ${sha_short}"
          echo "sha_short=$sha_short" >> "$GITHUB_OUTPUT"

      - name: Create branch
        id: create-branch
        run: |
          branch_name="deploy/deploy-$(uuidgen | cut -c1-8)"
          git checkout -b ${branch_name}
          echo "branch_name=$branch_name" >> "$GITHUB_OUTPUT"

      - name: Modify file
        run: |
          echo "Nueva línea añadida" >> ./charts/credictcardadapters-api/values.qa-euc1.yaml
          echo "Nueva línea añadida" >> ./charts/testfolder/values.qa-euc1.yaml

      - name: Setup Git
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/jabl01/dummy-repo-simulate-argocd.git
          git ls-remote origin
      - name: Authenticate GitHub App
        id: auth
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Commit and Push Changes
        run: |
          git add --all
          git commit -m "Update docker image tag for ${{ github.event.client_payload.env }} environment" || echo "No changes to commit"
          git push origin HEAD:refs/heads/${{ steps.create-branch.outputs.branch_name }}

      - name: Detect Changed Files
        id: detect-changes
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD)
          changed_files_count=$(echo "$changed_files" | wc -l | tr -d ' ')

          if [ -z "$changed_files" ]; then
            echo "No changes detected."
            echo "qa_values_changed=false" >> $GITHUB_ENV
            echo "changed_files=" >> $GITHUB_OUTPUT
          else
            echo "Changed files: $changed_files"
            echo "changed_files=$(echo "$changed_files" | tr '\n' ' ')" >> $GITHUB_OUTPUT

            if echo "$changed_files" | grep -v -E "/values[^/]*\.qa.*\.yaml" > /dev/null; then
              echo "qa_values_changed=false" >> $GITHUB_ENV
            else
              echo "qa_values_changed=true" >> $GITHUB_ENV
            fi
          fi
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --title "Deploy ${{ github.event.client_payload.service }} to ${{ github.event.client_payload.env }}" \
                       --body "Deployment triggered by ${{ github.actor }}" \
                       --head ${{ steps.create-branch.outputs.branch_name }}

      - name: Get Pull Request ID
        id: pr-id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              sleep 5  # Espera para asegurar que el PR esté registrado
          
              # Intentar obtener el ID del PR con reintentos
              max_retries=5
              retry_delay=3
              attempt=0
              pr_id=""
          
              while [[ -z "$pr_id" && $attempt -lt $max_retries ]]; do
                pr_id=$(gh pr list --state open --head ${{ steps.create-branch.outputs.branch_name }} --json number -q '.[0].number')
                
                if [[ -z "$pr_id" ]]; then
                  echo "Pull request ID not found. Retrying in $retry_delay seconds..."
                  sleep $retry_delay
                  ((attempt++))
                fi
              done
          
              if [[ -z "$pr_id" ]]; then
                echo "❌ ERROR: Could not retrieve Pull Request ID after multiple attempts."
                exit 1
              fi
          
              echo "Pull Request ID: $pr_id"
              echo "pr_id=$pr_id" >> $GITHUB_ENV
      - name: Approve and Review Pull Request using API
        if: ${{ env.qa_values_changed == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.JB_TOKEN }}
        run: |
          if [ -z "$pr_id" ]; then
            echo "❌ No pull request found for branch ${{ steps.create-branch.outputs.branch_name }}"
            exit 1
          fi

          echo "✅ Checking PR ID: $pr_id"
          
          # Verificar si el PR existe antes de aprobarlo
          pr_check=$(curl -s -o check_response.json -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_id")

          if [[ "$pr_check" -ne 200 ]]; then
            echo "❌ ERROR: Pull Request ID $pr_id not found or token has insufficient permissions."
            cat check_response.json
            exit 1
          fi

          echo "✅ Approving and reviewing PR #$pr_id"

          response=$(curl -s -o response.json -w "%{http_code}" -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_id/reviews" \
            -d '{
              "event": "APPROVE",
              "body": "✅ Approved automatically by GitHub Actions bot."
            }')

          if [[ "$response" -ne 200 ]]; then
            echo "❌ ERROR: Failed to approve PR. GitHub API response:"
            cat response.json
            exit 1
          fi

          echo "✅ PR #$pr_id approved successfully!"