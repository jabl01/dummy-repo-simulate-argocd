name: Create PR for Deploy

on:
  workflow_dispatch:

jobs:
  create-pr:
    name: Create PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short commit sha
        id: commit-sha
        run: |
          sha=${{ github.event.client_payload.sha }}
          echo ${sha}
          sha_short=${sha:0:7}
          echo "Short commit sha: ${sha_short}"
          echo "sha_short=$sha_short" >> "$GITHUB_OUTPUT"

      - name: Create branch
        id: create-branch
        run: |
          branch_name='deploy/deploy-${{steps.commit-sha.outputs.sha_short}}'
          git checkout -b ${branch_name}
          echo "branch_name=$branch_name" >> "$GITHUB_OUTPUT"

      - name: Modify file
        run: |
          echo "Nueva línea añadida" >> ./charts/credictcardadapters-api/values.qa-euc1.yaml
          echo "Nueva línea añadida" >> ./charts/testfolder/values.qa-euc1.yaml

      - name: Setup Git
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name 'jabl01'
          git config --global user.email 'jabl01@betssongroup.com'
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/jabl01/dummy-repo-simulate-argocd.git
          git ls-remote origin

      - name: Commit and Push Changes
        run: |
          git add --all
          git commit -m "Update docker image tag for ${{ github.event.client_payload.env }} environment" || echo "No changes to commit"
          git push origin HEAD:refs/heads/${{ steps.create-branch.outputs.branch_name }}

      - name: Detect Changed Files
        id: detect-changes
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD)
          changed_files_count=$(echo "$changed_files" | wc -l | tr -d ' ')

          if [ -z "$changed_files" ]; then
            echo "No changes detected."
            echo "qa_values_changed=false" >> $GITHUB_ENV
            echo "changed_files=" >> $GITHUB_OUTPUT
          else
            echo "Changed files: $changed_files"
            echo "changed_files=$(echo "$changed_files" | tr '\n' ' ')" >> $GITHUB_OUTPUT

            if echo "$changed_files" | grep -v -E "/values[^/]*\.qa.*\.yaml" > /dev/null; then
              echo "qa_values_changed=false" >> $GITHUB_ENV
            else
              echo "qa_values_changed=true" >> $GITHUB_ENV
            fi
          fi

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          gh pr create --title "Deploy ${{ github.event.client_payload.service }} to ${{ github.event.client_payload.env }}" \
                       --body "Deployment triggered by ${{ github.actor }}" \
                       --head ${{ steps.create-branch.outputs.branch_name }}

      # Obtener el installation token de la GitHub App
      - name: Authenticate GitHub App
        id: auth-github-app
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_PRIVATE_KEY: ${{ secrets.GITHUB_PRIVATE_KEY }}
        run: |
          APP_TOKEN=$(curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $(jwt encode --key "$GITHUB_PRIVATE_KEY" --alg RS256 --claims '{"iss": '$GITHUB_APP_ID'}')" \
            "https://api.github.com/app/installations" | jq -r '.[0].access_tokens_url')

          INSTALLATION_TOKEN=$(curl -X POST \
            -H "Authorization: Bearer $(jwt encode --key "$GITHUB_PRIVATE_KEY" --alg RS256 --claims '{"iss": '$GITHUB_APP_ID'}')" \
            -H "Accept: application/vnd.github.v3+json" \
            "$APP_TOKEN" | jq -r '.token')

          echo "INSTALLATION_TOKEN=$INSTALLATION_TOKEN" >> $GITHUB_ENV

      # Aprueba el Pull Request con la GitHub App
      - name: Approve Pull Request (GitHub App)
        if: env.qa_values_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ env.INSTALLATION_TOKEN }}
        run: |
          pr_number=$(gh pr list --state open --head ${{ steps.create-branch.outputs.branch_name }} --json number -q ".[0].number")
          if [ -z "$pr_number" ]; then
            echo "No open pull request found."
            exit 1
          fi

          echo "Approving PR #$pr_number"
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/jabl01/dummy-repo-simulate-argocd/pulls/$pr_number/reviews" \
            -d '{"event":"APPROVE"}'